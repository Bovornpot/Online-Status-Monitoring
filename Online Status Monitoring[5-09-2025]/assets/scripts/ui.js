// assets/scripts/ui.js

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£)
function updateSortIndicators() {
    DOMElements.tableHeader.querySelectorAll('th.table-sortable').forEach(th => {
        th.classList.remove('sorted-asc', 'sorted-desc');
        if (th.dataset.column === sortColumn) {
            th.classList.add(sortDirection === 'asc' ? 'sorted-asc' : 'sorted-desc');
        }
    });
}

// REFACTORED: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function applyFilters() {
    const searchTerm = DOMElements.searchInput.value.toLowerCase();
    const provinceFilter = DOMElements.provinceFilter.value;
    const statusFilter = DOMElements.statusFilter.value;
    const regionFilter = DOMElements.regionFilter.value; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ
    const branchStatusFilter = DOMElements.branchStatusFilter.value; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const recorderFilter = DOMElements.recorderFilter.value; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

    filteredBranches = allBranches.filter(branch => {
        const matchesSearch = !searchTerm ||
            Object.values(branch).some(val => 
                String(val).toLowerCase().includes(searchTerm)
            );
        const matchesProvince = !provinceFilter || branch.province === provinceFilter;
        const matchesStatus = !statusFilter ||
            (statusFilter === 'online' && branch.onlineStatus === '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Online') ||
            (statusFilter === 'offline' && branch.onlineStatus !== '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Online')||
            (statusFilter === 'cctv' && branch.onlineStatus === '‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á CCTV');

        const matchesRegion = !regionFilter || branch.region === regionFilter;
        const matchesBranchStatus = !branchStatusFilter || branch.status === branchStatusFilter;
        const matchesRecorder = !recorderFilter || branch.recorder === recorderFilter;

        return matchesSearch && matchesProvince && matchesStatus && matchesRegion && matchesBranchStatus && matchesRecorder;
    });

    filteredBranches.sort((a, b) => {
        const valA = a[sortColumn] || '';
        const valB = b[sortColumn] || '';

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isNumber = !isNaN(valA) && !isNaN(valB) && valA !== '' && valB !== '';
        
        let comparison = 0;
        if (isNumber) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            comparison = parseFloat(valA) - parseFloat(valB);
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            comparison = String(valA).localeCompare(String(valB), 'th');
        }

        return sortDirection === 'asc' ? comparison : -comparison;
    });

    currentPage = 1;
    refreshUI(); // REFACTORED: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function refreshUI() {
    updateTable();
    updatePagination();
    updateStats(); // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    updateProvinceFilter();
    updateRegionFilter(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ
    updateBranchStatusFilter(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
    updateRecorderFilter(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    updateSortIndicators();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó table ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function updateTable() {
    if (allBranches.length === 0) {
        showEmptyMessage("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Import ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤");
        DOMElements.paginationContainer.style.display = 'none';
        return;
    }

    if (filteredBranches.length === 0) {
        showEmptyMessage("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
        DOMElements.paginationContainer.style.display = 'none';
        return;
    }
    
    DOMElements.paginationContainer.style.display = 'flex';
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = Math.min(startIndex + pageSize, filteredBranches.length);
    const pageData = filteredBranches.slice(startIndex, endIndex);
    const searchTerm = DOMElements.searchInput.value.toLowerCase();

    const tableRows = pageData.map(branch => {
        let statusDisplayHtml;
        switch (branch.onlineStatus) {
            case '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Online':
                statusDisplayHtml = '<span class="status-online">üü¢ Online</span>';
                break;
            case '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Online':
                statusDisplayHtml = '<span class="status-offline">üî¥ Offline</span>';
                break;
            case '‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á CCTV':
                statusDisplayHtml = '<span class="status-cctv">üü† No CCTV</span>';
                break;
            default:
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô Offline
                statusDisplayHtml = '<span class="status-offline">üî¥ Offline</span>';
        }

        return `
            <tr data-id="${branch.id}">
                <td>${highlightText(branch.storeCode, searchTerm)}</td>
                <td>${highlightText(branch.branchName, searchTerm)}</td>
                <td>${highlightText(branch.region, searchTerm) || ''}</td>
                <td>${highlightText(branch.status, searchTerm) || '-'}</td>
                <td>${statusDisplayHtml}</td>
                <td>${highlightText(branch.recorder, searchTerm) || '-'}</td>
                <td>${highlightText(branch.district, searchTerm) || ''}</td>
                <td>${highlightText(branch.province, searchTerm) || ''}</td>
                <td>${highlightText(branch.phone, searchTerm) || '-'}</td>
                <td>
                    <button class="btn-manage" data-id="${branch.id}">‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</button>
                </td>
            </tr>
        `;
    }).join('');

    DOMElements.branchTableBody.innerHTML = tableRows;
}

// REFACTORED: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Pagination
function updatePagination() {
    const totalItems = filteredBranches.length;
    if (totalItems === 0) return;

    const totalPages = Math.ceil(totalItems / pageSize);
    const startItem = (currentPage - 1) * pageSize + 1;
    const endItem = Math.min(currentPage * pageSize, totalItems);

    DOMElements.paginationInfo.textContent = `‡πÅ‡∏™‡∏î‡∏á ${startItem} - ${endItem} ‡∏à‡∏≤‡∏Å ${totalItems} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
    DOMElements.currentPageInfo.textContent = `‡∏´‡∏ô‡πâ‡∏≤ ${currentPage} ‡∏à‡∏≤‡∏Å ${totalPages}`;

    DOMElements.firstPageBtn.disabled = currentPage === 1;
    DOMElements.prevPageBtn.disabled = currentPage === 1;
    DOMElements.nextPageBtn.disabled = currentPage === totalPages;
    DOMElements.lastPageBtn.disabled = currentPage === totalPages;
}
function changePageSize() {
    pageSize = parseInt(DOMElements.pageSizeSelect.value);
    currentPage = 1;
    updateTable();
    updatePagination();
}
function goToPage(page) {
    const totalPages = Math.ceil(filteredBranches.length / pageSize);
    currentPage = Math.max(1, Math.min(page, totalPages));
    updateTable();
    updatePagination();
}
function goToPreviousPage() { if (currentPage > 1) goToPage(currentPage - 1); }
function goToNextPage() { 
    const totalPages = Math.ceil(filteredBranches.length / pageSize);
    if (currentPage < totalPages) goToPage(currentPage + 1);
}

// REFACTORED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
function updateStats() {
    const total = allBranches.length;
    const online = allBranches.filter(b => b.onlineStatus === '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Online').length;
    const offline = total - online;
    const percentage = total > 0 ? Math.round((online / total) * 100) : 0;

    DOMElements.totalBranches.textContent = total;
    DOMElements.onlineBranches.textContent = online;
    DOMElements.offlineBranches.textContent = offline;
    DOMElements.onlinePercentage.textContent = `${percentage}%`;

    updateChartAndSummary(); 
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞ Summary Cards
// NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞ Summary Cards
function updateChartAndSummary() {
    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏°‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ 'status' ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ emoji ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const statusDisplayNames = {
        '‡∏õ‡∏ï‡∏ó': '<span class="badge">‚õΩ</span> ‡∏õ‡∏ï‡∏ó (PTT Station)',
        'CO': '<span class="badge">üè¢</span> CO (Company Owned)',
        'SBP': '<span class="badge">ü§ù</span> SBP (Sub Business Partner)',
        'Sub-Area': '<span class="badge">üìç</span> Sub-Area (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡∏¢)',
        '‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á CCTV': '<span class="badge">‚ùå</span> ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á CCTV',
        '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏': '<span class="badge">‚ùì</span> ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
    };

    // 1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'status' ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Online/Offline
    const statusData = {};
    allBranches.forEach(branch => {
        const status = branch.status || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        if (!statusData[status]) {
            statusData[status] = { total: 0, online: 0, offline: 0 };
        }
        statusData[status].total++;
        if (branch.onlineStatus === '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Online') {
            statusData[status].online++;
        } else {
            statusData[status].offline++;
        }
    });

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary Cards ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
    let summaryHtml = '';
    const sortedStatuses = Object.keys(statusData).sort();

    sortedStatuses.forEach(status => {
        const data = statusData[status];
        const rate = data.total > 0 ? ((data.online / data.total) * 100).toFixed(1) : 0;
        const displayName = statusDisplayNames[status] || status; // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏õ

        summaryHtml += `
            <div class="summary-card">
                <div class="summary-type">${displayName}</div>
                <div class="summary-data">
                    <div class="data-item">
                        <div class="value">${data.total}</div>
                        <div class="label">‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                    </div>
                    <div class="data-item">
                        <div class="value online">${data.online}</div>
                        <div class="label online">Online</div>
                    </div>
                    <div class="data-item">
                        <div class="value offline">${data.offline}</div>
                        <div class="label offline">Offline</div>
                    </div>
                    <div class="data-item">
                        <div class="value rate">${rate}%</div>
                        <div class="label rate">Rate</div>
                    </div>  
                </div>
            </div>
        `;
    });
    DOMElements.statusSummaryContainer.innerHTML = summaryHtml;

    // 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü Chart.js
    const chartLabels = sortedStatuses.map(status => {
        // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        switch (status) {
            case '‡∏õ‡∏ï‡∏ó': return '‡∏õ‡∏ï‡∏ó';
            case 'CO': return 'CO';
            case 'SBP': return 'SBP';
            case 'Sub-Area': return 'Sub-Area';
            default: return status;
        }
    });

    const onlineData = sortedStatuses.map(status => statusData[status].online);
    const offlineData = sortedStatuses.map(status => statusData[status].offline);

    // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
    if (window.statusChart) {
        window.statusChart.data.labels = chartLabels;
        window.statusChart.data.datasets[0].data = onlineData;
        window.statusChart.data.datasets[1].data = offlineData;
        window.statusChart.update();
    }
}

// REFACTORED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
function updateProvinceFilter() {
    const provinces = [...new Set(allBranches.map(b => b.province).filter(p => p))].sort();
    const currentValue = DOMElements.provinceFilter.value;
    
    DOMElements.provinceFilter.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option>' + 
        provinces.map(p => `<option value="${p}">${p}</option>`).join('');
        
    // ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
    if (provinces.includes(currentValue)) {
        DOMElements.provinceFilter.value = currentValue;
    }
}

// NEW: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ
function updateRegionFilter() {
    const regions = [...new Set(allBranches.map(b => b.region).filter(p => p))].sort();
    const currentValue = DOMElements.regionFilter.value;

    DOMElements.regionFilter.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏Ñ</option>' +
        regions.map(r => `<option value="${r}">${r}</option>`).join('');

    if (regions.includes(currentValue)) {
        DOMElements.regionFilter.value = currentValue;
    }
}

// NEW: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
function updateBranchStatusFilter() {
    const statuses = [...new Set(allBranches.map(b => b.status).filter(p => p))].sort();
    const currentValue = DOMElements.branchStatusFilter.value;
    
    DOMElements.branchStatusFilter.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>' + 
        statuses.map(s => `<option value="${s}">${s}</option>`).join('');

    if (statuses.includes(currentValue)) {
        DOMElements.branchStatusFilter.value = currentValue;
    }
}

// NEW: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
function updateRecorderFilter() {
    const recorders = [...new Set(allBranches.map(b => b.recorder).filter(p => p))].sort();
    const currentValue = DOMElements.recorderFilter.value;

    DOMElements.recorderFilter.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</option>' +
        recorders.map(r => `<option value="${r}">${r}</option>`).join('');

    if (recorders.includes(currentValue)) {
        DOMElements.recorderFilter.value = currentValue;
    }
}
